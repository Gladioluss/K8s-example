{{- if hasPrefix "review" .Values.werf.env }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: master-conf
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
data:
  postgresql.conf: |
    wal_level=replica
    hot_standby=on
    max_wal_senders=10
    max_replication_slots=10
    hot_standby_feedback=on
  init.sql: |
    CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'replicator_password';
    SELECT pg_create_physical_replication_slot('replication_slot');
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-m
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
  labels:
    service: postgres-m
spec:
  selector:
    service: postgres-m
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-m
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
  labels:
    service: postgres-m
spec:
  replicas: 1
  serviceName: postgres-m
  selector:
    matchLabels:
      service: postgres-m
  template:
    metadata:
      labels:
        service: postgres-m
    spec:
      nodeSelector:
        nodepool: application-node-pool
      imagePullSecrets:
        - name: {{ required ".Values.registry.secret_name" .Values.registry.secret_name }}
      containers:
        - name: postgres-m
          image: {{ .Values.werf.image.postgresreview }}
          env:
            - name: POSTGRES_USER
              value: {{ pluck .Values.global.env .Values.review.pg_condo | first | default .Values.review.pg_condo._default }}
            - name: POSTGRES_DB
              value: {{ pluck .Values.global.env .Values.review.pg_condo | first | default .Values.review.pg_condo._default }}
            - name: POSTGRES_PASSWORD
              value: {{ pluck .Values.global.env .Values.review.pg_condo | first | default .Values.review.pg_condo._default }}
            - name: PGDATA
              value: "/data/pg_data"
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "md5\nhost replication all 0.0.0.0/0 md5"
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=md5"
          ports:
            - name: postgres-m
              containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command: [ "/bin/sh", "-i", "-c", "psql -h 127.0.0.1 -U $POSTGRES_USER -q -d $POSTGRES_USER -c 'SELECT 1'"]
            timeoutSeconds: 5
            initialDelaySeconds: 15
          livenessProbe:
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            initialDelaySeconds: 15
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/bash", "-l", "-c", "gosu postgres pg_ctl -m fast -w stop" ]
          resources:
            requests:
              cpu: {{ pluck .Values.global.env .Values.review.pg_resources.requests.cpu | first | default .Values.review.pg_resources.requests.cpu._default }}
              memory: {{ pluck .Values.global.env .Values.review.pg_resources.requests.memory | first | default .Values.review.pg_resources.requests.memory._default }}
            limits:
              memory: {{ pluck .Values.global.env .Values.review.pg_resources.requests.memory | first | default .Values.review.pg_resources.requests.memory._default }}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          emptyDir: {}
        - name: master-conf
          configMap:
            name: master-conf

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-r
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
  labels:
    service: postgres-r
spec:
  selector:
    service: postgres-r
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-r
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
  labels:
    service: postgres-r
spec:
  replicas: 1
  serviceName: postgres-r
  selector:
    matchLabels:
      service: postgres-r
  template:
    metadata:
      labels:
        service: postgres-r
    spec:
      nodeSelector:
        nodepool: application-node-pool
      imagePullSecrets:
        - name: {{ required ".Values.registry.secret_name" .Values.registry.secret_name }}
      containers:
        - name: postgres-r
          image: {{ .Values.werf.image.postgresreview }}
          command:
            - /bin/sh
            - -c
            - |
              if [ ! -f /var/lib/postgresql/initialized ]; then
              until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-m --port=5432
              do
              sleep 1s
              done
              chmod 0700 /var/lib/postgresql/data
              touch /var/lib/postgresql/initialized
              fi
              postgres
          env:
            - name: POSTGRES_USER
              value: {{ pluck .Values.global.env .Values.review.pg_condo | first | default .Values.review.pg_condo._default }}
            - name: POSTGRES_DB
              value: {{ pluck .Values.global.env .Values.review.pg_condo | first | default .Values.review.pg_condo._default }}
            - name: POSTGRES_PASSWORD
              value: {{ pluck .Values.global.env .Values.review.pg_condo | first | default .Values.review.pg_condo._default }}
            - name: PGDATA
              value: "/data/pg_data"
            - name: PGUSER
              value: "replicator"
            - name: PGPASSWORD
              value: "replicator_password"
          ports:
            - name: postgres-r
              containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command: [ "/bin/sh", "-i", "-c", "psql -h 127.0.0.1 -U $POSTGRES_USER -q -d $POSTGRES_USER -c 'SELECT 1'"]
            timeoutSeconds: 5
            initialDelaySeconds: 15
          livenessProbe:
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            initialDelaySeconds: 15
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/bash", "-l", "-c", "gosu postgres pg_ctl -m fast -w stop" ]
          resources:
            requests:
              cpu: {{ pluck .Values.global.env .Values.review.pg_resources.requests.cpu | first | default .Values.review.pg_resources.requests.cpu._default }}
              memory: {{ pluck .Values.global.env .Values.review.pg_resources.requests.memory | first | default .Values.review.pg_resources.requests.memory._default }}
            limits:
              memory: {{ pluck .Values.global.env .Values.review.pg_resources.requests.memory | first | default .Values.review.pg_resources.requests.memory._default }}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          emptyDir: {}
{{- end }}
