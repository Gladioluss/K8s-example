{{- if hasPrefix "review" .Values.werf.env }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "restore-database"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
data:
  pg.sh: |
    #!/bin/bash -x
    set -x

    cd obsutil_linux_amd64
    echo "Configuring obsutil..."

    set +o xtrace
    ./obsutil config -i=${OBS_ACCESS_KEY} -k=${OBS_SECRET_KEY} -e=${OBS_ENDPOINT}
    set -o xtrace

    echo "Condo db --->"
    ./obsutil cp obs://db-dumps-for-clusters/condo.dump /tmp/condo_last.backup
    echo "Condo success"
    echo "EPS db --->"
    ./obsutil cp obs://db-dumps-for-clusters/eps.dump /tmp/eps_last.backup
    echo "EPS success"
    echo "RB db --->"
    ./obsutil cp obs://db-dumps-for-clusters/rb.dump /tmp/rb_last.backup
    echo "RB success"
    
    sleep 20
    # check postgres readyness
    while ! (psql -d "${CREDENTIALS}" -c "select 1") ;
    do
      echo postgres not ready;
      sleep 15
    done
    echo postgres ready;
    sleep 2

    echo "Drop&Create db Condo"

    # psql -d "${CREDENTIALS}" -c "CREATE USER "${PG_REVIEW_CONDO_USER}" WITH encrypted password '${PG_REVIEW_CONDO_PASS}';"
    # psql -d "${CREDENTIALS}" -c "CREATE DATABASE "${PG_REVIEW_CONDO_DB}" OWNER "${PG_REVIEW_CONDO_USER}";"
    #    sleep 10000
    #pg_restore -d "${CREDENTIALS}" -w -U "${PG_REVIEW_CONDO_USER}" -d "${PG_REVIEW_CONDO_DB}" /tmp/condo_last.backup
    PGPASSWORD="${PG_REVIEW_CONDO_PASS}" pg_restore --verbose -h postgres -U "${PG_REVIEW_CONDO_USER}" -O --no-acl -d "${PG_REVIEW_CONDO_DB}" /tmp/condo_last.backup
    rm -v /tmp/condo_last.backup

    echo "Drop&Create db EPS"
    
    psql -d "${CREDENTIALS}" -c "CREATE USER "${PG_REVIEW_EPS_USER}" WITH encrypted password '${PG_REVIEW_EPS_PASS}';"
    psql -d "${CREDENTIALS}" -c "CREATE DATABASE "${PG_REVIEW_EPS_DB}" OWNER "${PG_REVIEW_EPS_USER}";"
    
    # pg_restore -d "${CREDENTIALS}" -w -U "${PG_REVIEW_EPS_USER}" -d "${PG_REVIEW_EPS_DB}" /tmp/eps_last.backup
    PGPASSWORD="${PG_REVIEW_EPS_PASS}" pg_restore -h postgres -U "${PG_REVIEW_EPS_USER}" -O --no-acl -d "${PG_REVIEW_EPS_DB}" /tmp/eps_last.backup
    rm -v /tmp/eps_last.backup

    echo "Drop&Create db RB"
    
    psql -d "${CREDENTIALS}" -c "CREATE USER "${PG_REVIEW_RB_USER}" WITH encrypted password '${PG_REVIEW_RB_PASS}';"
    psql -d "${CREDENTIALS}" -c "CREATE DATABASE "${PG_REVIEW_RB_DB}" OWNER "${PG_REVIEW_RB_USER}";"
    
    # pg_restore -d "${CREDENTIALS}" -w -U "${PG_REVIEW_RB_USER}" -d "${PG_REVIEW_RB_DB}" /tmp/rb_last.backup
    PGPASSWORD="${PG_REVIEW_RB_PASS}" pg_restore -h postgres -U "${PG_REVIEW_RB_USER}" -O --no-acl -d "${PG_REVIEW_RB_DB}" /tmp/rb_last.backup
    rm -v /tmp/rb_last.backup

    echo "Create db for registry"
    psql -d "${CREDENTIALS}" -c "CREATE USER "${PG_REVIEW_REGISTRY_USER}" WITH encrypted password '${PG_REVIEW_REGISTRY_PASS}';"
    psql -d "${CREDENTIALS}" -c "CREATE DATABASE "${PG_REVIEW_REGISTRY_DB}" OWNER "${PG_REVIEW_REGISTRY_USER}";"
    
    echo "Create db for passapp"
    psql -d "${CREDENTIALS}" -c "CREATE USER "${PG_REVIEW_PASSAPP_USER}" WITH encrypted password '${PG_REVIEW_PASSAPP_PASS}';"
    psql -d "${CREDENTIALS}" -c "CREATE DATABASE "${PG_REVIEW_PASSAPP_DB}" OWNER "${PG_REVIEW_PASSAPP_USER}";"
    echo "Restore complete"
{{- end }}